[{"content":"Scenario We have successfully confirmed the location of the malicious actor who compromised our government’s WiFi network.\nRecently, a dawn raid was conducted as part of OP ERADICATE at an address in the Velorian capital, resulting in the seizure of a substantial amount of evidence. Notably, an Android device belonging to the agent was confiscated, and it is believed to have been at the scene of the attack.\nWe require your expertise to analyze this device and answer the detailed questions below. Time is limited; a Velorian COBR meeting has been organized to discuss your findings\u0026hellip;\nFiles opshieldwall2.zip containing \u0026ldquo;EVIDENCE-CASE-RAVENSKIAN-AGENT-002,\u0026rdquo; which includes the \u0026ldquo;data\u0026rdquo; and \u0026ldquo;storage\u0026rdquo; folders of an Android device. This provides a significant amount of room for analysis, as the /data directory contains a wealth of information, such as:\nCheatsheet SANS FOR585 Foreword Before we begin, here is some important information about Android:\nUser data on Android can be stored both internally and externally. Internal data is saved in NAND flash memory, a non-volatile memory that retains data even when the power is off. NAND stores the bootloader, the operating system, and user data. Application data is stored on NAND flash memory or on the SD card.\nAndroid is based on variants of the Long-Term Support (LTS) branches of the Linux Kernel. With Android v8 (Oreo), Google required the use of Linux Kernel version 4.4 or higher. For example, Android v9 (Pie) runs on versions 4.4, 4.9, or 4.14, depending on the device. More information is available on the Android OS wiki: https://source.android.com/docs/core/architecture/kernel/android-common?hl=en.\nandroid-mainline is the primary development branch for Android features. The mainline Linux branch is merged with android-mainline every time Linus Torvalds releases a version or release candidate:\nCommonly found file systems include:\nEXT4 F2FS YAFFS2 exFAT Most artifacts are stored as SQLite databases and XML files. Android isolates applications at the kernel level, assigning each one a unique identifier (UID) to track running applications.\nAndroid Architecture The Linux kernel forms the foundation of Android, supporting essential features like threads and low-level memory management used by Android Runtime (ART).\nThe Hardware Abstraction Layer (HAL) provides standardized interfaces that expose hardware functionality to higher-level Java APIs. It consists of library modules specific to each hardware component (such as the camera or Bluetooth). When an API accesses hardware, Android loads the corresponding library module.\nThe Android Runtime (ART) environment runs each application in its own process and instance. ART manages multiple virtual machines on low-memory devices, using DEX bytecode specially designed and optimized for Android. Compilation tools like d8 transform Java code into DEX bytecode for execution on Android.\nMany essential Android system components and services, such as ART and HAL, are created from native code requiring native libraries written in C and C++.\nAndroid\u0026rsquo;s features are accessible via Java APIs, facilitating the reuse of key modular system components and services like notifications, resource management, and localization.\nSystem applications are the core set of apps that come with Android.\nAndroid Virtual Machine Virtual Machines (VMs) act as abstraction layers between an application and the underlying Android device.\nEach application runs in its own instance within a VM, isolating it from other applications.\nAndroid applications are written in Java but are compiled into Java bytecode.\nThis bytecode is then transformed into Dalvik bytecode (.dex files) or ART bytecode.\nDalvik and ART run the bytecode (.dex) in a virtual machine, allowing applications to function independently of the underlying hardware.\nBefore KitKat (v.4.4), Android used Dalvik VMs.\nStarting with Lollipop (v5.0), Android began using Android Runtime (ART) and phased out Dalvik VM.\nBoth Dalvik and ART use DEX bytecode, but ART includes new optimization features.\nDirectory Structure /cache: Can contain Gmail attachments, downloads, browsing data, and OTA updates. /efs: Contains files necessary for device operation in case of failure. /data: /data/data: Contains application folders (/data/data/com.example.app), app configuration files, SQLite databases, logs, cache, etc. /app: Stores .apk files from the Android market. *Malware may be found here. /backup: Stores backup APIs for developers; user backup data is not stored here. /media: Internal storage equivalent to an SD card. *Malware may be found here. /misc: Stores files related to Bluetooth, DHCP, VPN, Wi-Fi, etc. /system: Contains key files such as gesture.key and passwords.key; the accounts.db file, which stores usernames and passwords for file authentication, etc. /property: Stores system properties, including timezone, language settings, etc. /mnt: /asec: Stores unencrypted app data. /DCIM: Stores album thumbnails. /Pictures: Stores camera images. /downloads: Locally downloaded files. /secure/asec: Stores encrypted app data. /system: /app: Contains .apk files. *Malware may be found here. /priv-app: Contains .apk files with system-level permissions. *Malware may be found here. For more information on:\nApp permissions: https://developer.android.com/guide/topics/permissions/overview?hl=en, https://blog.mindorks.com/what-are-the-different-protection-levels-in-android-permission/ Android CLI: https://developer.android.com/tools/adb?hl=en Setup Given the files and the scenario, I will use the Autopsy tool. Setting it up may take some time, so I’m starting with it here.\nIf you\u0026rsquo;re unfamiliar with Autopsy, here’s a brief description:\nAutopsy is an open-source digital investigation tool. It serves as the graphical interface for the Sleuth Kit and other forensic tools. It is commonly used to analyze hard drives and smartphones in the context of investigations. Key features of Autopsy include deleted file recovery, metadata analysis, keyword searching, timeline visualization, file system analysis, and more.\nTo use it, we need to create a \u0026ldquo;Case\u0026rdquo;:\nHere, we know we’re not dealing with a \u0026ldquo;Disk Image\u0026rdquo; or a VM, nor a local disk. Therefore, we select the appropriate option, \u0026ldquo;Logical Files\u0026rdquo;:\nWe wait for Autopsy and its modules to complete the ingestion process. This may take some time.\nAll set, we can begin the investigation:\nQuestions Question 1 What is the email address used by the agent in various applications/services? To answer this, I will use the report generated by Autopsy via ALEAPP (Android Logs Events And Protobuf Parser), an open-source project aimed at parsing all known Android artifacts for forensic analysis.\nTo find it quickly and easily, we can search in:\n/data/data/com.android.vending/databases/library.db to find the Google account used to download apps. /data/data/com.android.providers.contacts/databases/contacts2.db to find the Google account used to sync contacts. Additionally (not applicable in this challenge):\n/data/com.android.vending/shared_prefs/lastaccount.xml (last account used on Google PlayStore for Android 9 and later). /data/com.google.android.gms/shared_prefs/BackupAccount.xml (email for backup account). /data/com.android.email/databases/EmailProvider.db (email accounts, 3rd-party app data, and messages associated with email notifications). Finally, we end up with the HTML report:\nThe email address can be found in various places.\nFor example, in the \u0026ldquo;Chrome\u0026rdquo; app under \u0026ldquo;Autofill\u0026rdquo; (a feature that automatically fills in forms with saved information):\nIn the Chrome \u0026ldquo;Login Data\u0026rdquo;:\nAnd in the \u0026ldquo;Installed Apps (Library)\u0026rdquo; section, we find the Google account email used for app downloads:\nAnswer: olegpachinksy@gmail.com\nQuestion 2 What is the contact number of the handler assigned to the arrested agent? In the \u0026ldquo;Contacts\u0026rdquo; section:\nAnswer: +323145232315\nQuestion 3 Retrieve the credentials and link to the official portal for Ravenski agents. This could provide an intelligence advantage by using this access to gather actionable information about upcoming operations planned by the Ravenski government. We already found the answer to this question in Question 1 via Chrome \u0026ldquo;Login Data\u0026rdquo;:\nAnswer: agent.ravensk.idu.com:olegpachinksy007:HBLKNKD0MADsdfsa2334(*\u0026amp;DSMDB\nQuestion 4 What is the contact code used to confirm the identity of the agent and handler when using a secure chat channel? First, I’ll check for potential SMS messages here: /data/data/com.android.providers.telephony/databases/mmssms.db.\nNothing found.\nWe could also check here, though not applicable in this challenge:\n/data/com.google.android.gms/databases/icing_mmssms.db (SMS/MMS). /data/com.google.android.gms/databases/ipa_mmssms.db (SMS/MMS). We need to find the messaging app used. In Autopsy’s \u0026ldquo;Installed Programs\u0026rdquo; section, we can view all installed apps:\nDifferent categories are shown:\nInstalled Apps (GMS) Installed Apps (Library) Installed Apps (Vending) Installed Apps - GMS: This category refers to apps installed on the device, regardless of their installation method. Data can be found here: /data/com.google.android.gms/databases/.\nInstalled Apps - Library: This category refers to the app library for the Google user on the device. It may contain apps installed by the same Google account on another device or a previous installation. Data is stored here: /data/com.android.vending/databases/.\nInstalled Apps - Vending: This category specifically refers to apps installed via the Google Play Store. Data is retained even if the app is uninstalled and is located here: /data/com.android.vending/databases/.\nFor clarity, let’s return to ALEAPP and focus on \u0026ldquo;Vending\u0026rdquo; type apps:\nThe app that stands out is mega.privacy.android.app. Indeed, it’s a messaging application:\nALEAPP has parsed messages exchanged via MEGA:\nWe can find this information here: /data/data/mega.privacy.android.app/karere-TU1IaTh4TUJpdTQKAfO_2P0qU8NMP7zDRlgv.db.\nAnswer: REDAPPLEONACAR\nQuestion 5 The handler shared a document with the agent using a cloud storage service. When was this file shared with the agent? Nothing found in messages. The document must have been sent another way. We know there’s no other messaging app, and it couldn’t have been sent via SMS/MMS.\nIn the installed apps, we saw com.google.android.apps.docs. Let’s check here: \\data\\data\\com.google.android.apps.docs.\nWe find the database /data/data/com.google.android.apps.docs/app_cello/olegpachinksy@gmail.com/cello.db containing this information:\nThe file can also be found here: EVIDENCE-CASE-RAVENSKIAN-AGENT-002/storage/emulated/0/Download/Debrief-Velorian OP Expansion East.pdf:\nNote: Autopsy interprets timestamps using your computer’s time zone by default. Remember to adjust this setting in Autopsy (Tools \u0026gt; Options \u0026gt; View \u0026gt; Time Zone).\nAnswer: 2024-04-01 09:36:41\nQuestion 6 What is the download URI for the previously identified shared file? We know the file was downloaded, as we found it in /storage/emulated/0/Download/.\nThus, we can search in /data/data/com.android.providers.downloads/databases/downloads.db:\nAnswer: https://www.googleapis.com/drive/v2internal/files/1iQKKlBU2vuJD1Xet6IYPt7IODVtDHxv1?alt=media\u0026amp;source=downloadUrl\u0026amp;auditContext=fileAction\u0026amp;reason=909\u0026amp;syncType=1\u0026amp;featureLabel=android-sync-classic\u0026amp;openDrive=false\u0026amp;errorRecovery=false\u0026amp;originatorApp=102\nQuestion 7 To gather further intelligence for Veloria’s counter-espionage efforts, what was the primary objective of this cyber operation led by the Ravenski government? Returning to the document:\nAnswer: Infiltrate the Velorian secured network to gather intelligence on upcoming cyber-attacks, their techniques, and target countries.\nQuestion 8 Identifying the handler is also crucial for Velorian law enforcement to understand the scope of this operation. What is the handler’s email address? We already saw this in the MEGA app messages:\nAnswer: ivoryalex783@gmail.com\nQuestion 9 What is the name of the place where the agent and handler met? Returning to the messages:\nThis question took the most time; I spent about an hour on it.\nInitially, I searched the usual locations:\n/data/com.google.android.apps.maps/databases/gmm_storage.db /data/com.google.android.apps.maps/databases/search_history.db /data/com.google.android.apps.maps/databases/da_destination_history /data/com.sec.android.daemonapp/db/weatherClock /data/com.google.android.apps.maps/app_tts-cache/ /data/com.google.android.apps.maps/cache/image_manager_disk_cache/ After finding nothing, I thought the answer might be in the metadata of images on the phone. Indeed, there were 48 images, several of which showed bars:\nHowever, nothing conclusive.\nI then questioned:\nAre there other navigation/location apps on the phone? Is it certain I should look in the Google Maps app? No, only Google Maps. No, it’s possible the search was made in the browser instead. After checking typical Google Maps artifacts, I decided to search in the browser but found nothing.\nSo I returned to digging through Google Maps artifacts:\napp: nothing relevant app_offline_downloads: nothing relevant app_offline_hashes: nothing relevant app_textures: nothing relevant app_webview: nothing relevant cache: nothing relevant databases: too many files, will revisit files: \u0026ldquo;new_recent_history_cache_search.cs\u0026rdquo; It turns out I could have simply searched for the keyword \u0026ldquo;Pub\u0026rdquo; 🤡\nAnswer: Levstik Pub\nQuestion 10 According to the chat between the agent and handler, it appears that the handler sent the agent an image related to the infrastructure used by the Ravenski government for this cyber-espionage operation. What C2 framework is used by the Ravenski government? Having already reviewed all images for Question 9, I have the answer.\nAnswer: Empire\nQuestion 11 Collecting information on infrastructure, such as IP addresses or hostnames, is crucial for Velorian authorities as they prepare a counter-offensive. Based on the recovered image sent by the handler to the agent, what is the IP address of one of the C2 servers operated by Ravenski threat actors? Answer: 98.24.12.45\n","date":"2024-05-19T08:00:05Z","image":"https://jaybird1291.github.io/blog/en/p/opshieldwall-2/OpShieldWall-2_hu17326740769496665102.jpg","permalink":"https://jaybird1291.github.io/blog/en/p/opshieldwall-2/","title":"OpShieldWall-2"},{"content":"Scenario Thank you for responding to our call. The Ministry of Defense of Velorian is in desperate need of assistance\u0026hellip;\nWe need to keep this discreet, but we believe that the public WiFi at the Ministry of Defense offices in Velorian has been compromised. The impact seems minimal, but network diagrams show that no real segmentation of the network has been implemented and that device-to-device traffic is allowed. Government ministers use this network with BYoD equipment and Velorian MoDNet hosts. Please analyze the provided pcap file and confirm how and when this occurred. Remember that this investigation is classified as TLP Amber.\nFiles opshieldwall1.zip containing the network capture \u0026ldquo;VELORIA-NETWORK.pcap\u0026rdquo; Setup Given the simplicity of this challenge, we can limit ourselves to tshark / wireshark.\nQuestions Question 1 Please confirm the SSID of our WiFi network. First, let’s get familiar with the capture. We’ll use the following command to gather some statistics:\n1 $ tshark -r traffic.pcapng -qz -r allows reading a file -q makes the output quieter (useful for stats as it displays global statistics, not per packet) -z enables statistics display There are many possible values (tshark -z help to display them), but here we primarily want to know:\nthe packet count the capture duration the IPv4 addresses with the most packets the IPv4 endpoints exchanging the most the most used protocols Packet count and duration: 106; 31.6 sec\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ tshark -r VELORIA-NETWORK.pcap -qz io,stat,0 =================================== | IO Statistics | | | | Duration: 31.6 secs | | Interval: 31.6 secs | | | | Col 1: Frames and bytes | |---------------------------------| | |1 | | | Interval | Frames | Bytes | | |-------------------------------| | | 0.0 \u0026lt;\u0026gt; 31.6 | 106 | 20759 | | =================================== IPv4 endpoints:\nwith the most packets: 1 2 3 4 5 6 7 8 9 10 $ tshark -r VELORIA-NETWORK.pcap -qz endpoints,ip ================================================================================ IPv4 Endpoints Filter:\u0026lt;No Filter\u0026gt; | Packets | | Bytes | | Tx Packets | | Tx Bytes | | Rx Packets | | Rx Bytes | 0.0.0.0 3 1044 3 1044 0 0 255.255.255.255 3 1044 0 0 3 1044 10.0.3.1 3 1048 3 1048 0 0 10.0.3.52 3 1048 0 0 3 1048 ================================================================================ exchanging the most: 1 2 3 4 5 6 7 8 9 tshark -r VELORIA-NETWORK.pcap -qz conv,ip ================================================================================ IPv4 Conversations Filter:\u0026lt;No Filter\u0026gt; | \u0026lt;- | | -\u0026gt; | | Total | Relative | Duration | | Frames Bytes | | Frames Bytes | | Frames Bytes | Start | | 0.0.0.0 \u0026lt;-\u0026gt; 255.255.255.255 0 0 bytes 3 1044 bytes 3 1044 bytes 23.256576000 8.3680 10.0.3.1 \u0026lt;-\u0026gt; 10.0.3.52 0 0 bytes 3 1048 bytes 3 1048 bytes 23.256959000 8.3693 ================================================================================ Most used protocols:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 tshark -r VELORIA-NETWORK.pcap -qz io,phs =================================================================== Protocol Hierarchy Statistics Filter: sll frames:106 bytes:20759 radiotap frames:92 bytes:17572 wlan_radio frames:92 bytes:17572 wlan frames:92 bytes:17572 wlan.mgt frames:92 bytes:17572 eapol frames:6 bytes:999 eap frames:6 bytes:999 ip frames:6 bytes:2092 udp frames:6 bytes:2092 dhcp frames:6 bytes:2092 arp frames:2 bytes:96 =================================================================== To answer, we can simply use the command:\n1 2 3 $ tshark -r VELORIA-NETWORK.pcap -T fields -e wlan.ssid | head -n 1 | xxd -r -p VELORIA-MoD-AP012 Explication : (https://www.wireshark.org/docs/dfref/w/wlan.html)\n-t displays only user-specified fields (thus requiring the use of the -e option to specify fields) -e wlan.ssid specifies that the wlan.ssid field (SSID of wireless networks) should be extracted and displayed -xxd -r -p converts the output from hexadecimal to readable text Answer : VELORIA-MoD-AP012\nQuestion 2 Please confirm the MAC address of the access point (AP). 1 2 tshark -r VELORIA-NETWORK.pcap -T fields -e wlan.sa | head -n 1 02:00:00:00:01:00 Answer : 02:00:00:00:01:00\nQuestion 3 Please confirm the AP’s authentication state/mechanism and attack vector. Switching to Wireshark.\nAnswer : WPS\nQuestion 4 What is the packet number where the attack began? We can easily deduce that it’s at the first connection attempt (the only one in the capture).\nAnswer : 93\nQuestion 5 What is the packet number where the attack ended? It’s clear that it ends when the authentication fails.\nAnswer : 8\n","date":"2024-05-07T08:00:05Z","image":"https://jaybird1291.github.io/blog/en/p/opshieldwall-1/htb-opshieldwall1_hu4326099420609312043.png","permalink":"https://jaybird1291.github.io/blog/en/p/opshieldwall-1/","title":"OpShieldWall-1"}]